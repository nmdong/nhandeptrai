<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="SSHLibrary.library" type="library" format="ROBOT" generated="20200504 18:40:22">
<version>3.3.1.dev1</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Documentation for library ``SSHLibrary.library``.</doc>
<kw name="Is String">
<arguments>
<arg>item</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Is Truthy">
<arguments>
<arg>item</arg>
</arguments>
<doc>Returns `True` or `False` depending is the item considered true or not.

Validation rules:

- If the value is a string, it is considered false if it is `'FALSE'`,
  `'NO'`, `'OFF'`, `'0'`, `'NONE'` or `''`, case-insensitively.
  Considering `'NONE'` false is new in RF 3.0.3 and considering `'OFF'`
  and `'0'` false is new in RF 3.1.
- Other strings are considered true.
- Other values are handled by using the standard `bool()` function.

Designed to be used also by external test libraries that want to handle
Boolean values similarly as Robot Framework itself. See also
:func:`is_falsy`.</doc>
<tags>
</tags>
</kw>
<kw name="Keyword">
<arguments>
<arg>types=()</arg>
</arguments>
<doc>Decorator to set custom argument types to keywords.

This decorator creates ``robot_types`` attribute on the decorated
keyword method or function based on the provided arguments.
Robot Framework checks them to determine the keyword's
argument types.

Types must be given as a dictionary mapping argument names to types or as a list
(or tuple) of types mapped to arguments based on position. It is OK to
specify types only to some arguments, and setting ``types`` to ``None``
disables type conversion altogether.

Examples::

    @keyword(types={'length': int, 'case_insensitive': bool})
    def types_as_dict(length, case_insensitive=False):
        # ...

    @keyword(types=[int, bool])
    def types_as_list(length, case_insensitive=False):
        # ...

    @keyword(types=None])
    def no_conversion(length, case_insensitive=False):
        # ...

    @keyword
    def func():
        # ...</doc>
<tags>
</tags>
</kw>
<kw name="Plural Or Not">
<arguments>
<arg>item</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
</keywordspec>
